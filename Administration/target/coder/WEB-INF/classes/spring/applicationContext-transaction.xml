<?xml version="1.0" encoding="UTF-8"?>

<!-- 下面的xsd最好和当前使用的Spring版本号一致,如果换了Spring版本,这个最好也跟着改 -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- Druid 和 Spring 关联监控配置 start-->
    <!-- 官方Wiki：http://t.cn/R6CngsS -->
    <bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor" />
    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
        <property name="patterns">
            <list>
                <value>com.liu.coder.service.*</value>
                <!--如果使用的是 hibernate 则这里也要扫描路径，但是 mybatis 不需要-->
                <!--<value>com.liu.coder.dao.*</value>-->
            </list>
        </property>
    </bean>

    <aop:config proxy-target-class="true">
        <!-- pointcut-ref="druid-stat-pointcut" 这个报红没事-->
        <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
    </aop:config>
    <!-- Druid 和 Spring 关联监控配置 end-->


    <!-- 事务管理器 transactionManager -->
    <!-- http://www.mybatis.org/spring/zh/transactions.html -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>    
    
    <!-- 
    第一种方式:注解方式配置事物，扫描 @Transactional 注解的类定义事务，配置上service实现类
    (下面还有一个方法名拦截方式,两个同时配置也是可以使用的，但是不建议两者一起使用) 
    -->
    <!--<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>-->

    <!-- 第二种方式:XML文件配置事务start-->
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>

            <!-- 以这些单词开头的方法自动加入事务，参考连接：http://t.cn/R6Qk4Aa


				name		    ：绑定事务的方法名，可以使用通配符，可以配置多个。
				propagation	    ：传播行为
				isolation	    ：隔离级别
				read-only	    ：是否只读
				timeout		    ：超时信息
				rollback-for    ：发生哪些异常回滚.
				no-rollback-for ：发生哪些异常不回滚.
			 -->

            <!-- 如果是方法中直接抛顶层Exception异常的话，propagation="REQUIRED"是不顶用的，
            还需要配置rollback-for属性-->
            <!--<tx:method name="deleteMethod*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" no-rollback-for="java.lang.RuntimeException"/>-->
            <!--<tx:method name="insert*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.RuntimeException" />-->
            <!--<tx:method name="update*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" /> -->

            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>

            <!--<tx:method name="modify*" propagation="REQUIRED"/>
            <tx:method name="edit*" propagation="REQUIRED"/>
            <tx:method name="batch*"  propagation="REQUIRED"/>
            <tx:method name="remove*" propagation="REQUIRED"/>
            <tx:method name="time*" propagation="REQUIRED"/>&lt;!&ndash;定时器方法&ndash;&gt;
            <tx:method name="repair" propagation="REQUIRED"/>
            <tx:method name="deleteAndRepair" propagation="REQUIRED"/>-->

            <!--以这些单词开头的方法不加入事务-->
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="count*" propagation="SUPPORTS" read-only="true"/>
            <!--<tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="load*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="search*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="datagrid*" propagation="SUPPORTS" read-only="true"/>-->

            <tx:method name="*" propagation="SUPPORTS"/>

        </tx:attributes>
    </tx:advice>

    <!-- 配置切面：切入点和通知的结合 -->
    <aop:config>
        <!-- 切入点为 *..*.service.impl 包下的类的任意方法，
        参考链接：http://t.cn/R68hzT9 http://t.cn/R68hzTS -->

        <!--切入点的表达式
        在配置切入点的时候，需要定义切入点的表达式，格式为 execution([修饰符] 返回值类型 包名.类名.方法名(参数))
        * 修饰符可以省略不写，不是必须要出现的。
        * 返回值类型不能省略，具体根据方法来编写返回值类型，可以使用 * 代替。
        * 包名.类名，例如 com.xiaoke.service.impl.AdminServiceImpl
        * 包名每一层可以用 * 代替，例如 *.*.service.impl.AdminServiceImpl
        * 如果想省略多层包名，可以使用 *..* 来代替，例如 *..*.service.impl.AdminServiceImpl
        * 类名也可以使用 * 号代替，也可以这么写：*Impl
        * 方法也可以使用 * 号代替
        * 参数如果是一个参数可以使用 * 号代替，任意个参数使用 .. 代替-->
        <aop:advisor advice-ref="transactionAdvice" pointcut="execution(* *..*.service.impl.*Impl.*(..))"/>
    </aop:config>
    <!-- 第二种方式:XML文件配置事务end -->

</beans>
